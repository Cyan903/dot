#!/usr/bin/env bash

# osu! alternate trainer
#  $XDG_DATA_HOME/osuconfig/alt.wav needs to exist

xtable=$(xmodmap -pke)
device=$(xinput --list --long | grep XIKeyClass | head -n 1 | grep -E -o '[0-9]+')
hit_new=-1; last=-1

# Set keybinds here (R = reset):
#       K   D   D   K   R
BINDS=("e" "r" "o" "p" "z")
BREAK="$XDG_DATA_HOME"/osuconfig/alt.wav

# Parse alternating
reset_alt() {
    [[ "$2" && -f "$BREAK" ]] && mpv "$BREAK" > /dev/null &
    hit_new=-1; last=-1

    echo "$1"
}

check_alt() {
    last="$hit_new"

    [[ "$1" == "${BINDS[0]}" || "$1" == "${BINDS[1]}" ]] && hit_new=0
    [[ "$1" == "${BINDS[2]}" || "$1" == "${BINDS[3]}" ]] && hit_new=1
    [[ "$key" == "${BINDS[4]}" ]] && reset_alt "Reset -> $last, $hit_new"
    [[ "$hit_new" == "$last" && "$last" -ne -1 && "$hit_new" -ne -1 ]] && reset_alt "Failed -> $hit_new, prev -> $last" 1

    return 0
}

parse_keys() {
    read -r line

    code=$(echo "$line" | awk -F ' ' '/key press/ {print $NF}')
    key=$(echo "$xtable" | awk -v k="$code" '$2 == k { print $4 }')

    [[ -n "$ALT_CHECK_DEBUG" ]] && echo "Key -> $key:$code"
    [[ -z "$key" ]] || ! printf "%s\n" "${BINDS[@]}" | grep -q "^$key\$" && return

    check_alt "$key"
}

# Run xinput & check
if [[ "$EUID" -eq 0 ]]; then
    echo "Do not run this as root!"
    exit 1
fi

if [[ ! -f "$BREAK" ]]; then
    echo "\"$BREAK\" was not found!"
    echo "No audio will be played."
fi

echo "Watching on device -> \"$device\""
xinput test "$device" | while parse_keys; do :; done

